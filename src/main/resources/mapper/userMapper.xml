<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dwav">
    <!-- 이 안에 CRUD 쿼리 집어넣고, dao에서 여기를 call하면 된다! -->


   <!-- passwd check -->
   <select id = "pwCheck" resultType="int" parameterType="UserVO">
    select count(*) cnt
    from member
    where user_id  = #{user_id}
    and   user_pwd = #{user_pwd}
   </select>
    
    <!-- idCheck -->
    <select id = "idCheck" resultType="int" parameterType="UserVO">
    SELECT COUNT(*) cnt
    FROM member
    WHERE user_id = #{user_id}
    </select>


    <!-- 전체 조회 -->
    <select id="getAll" resultType="UserVO">
        SELECT
            user_id,
            user_pwd,
            first_name,
            last_name,
            birth_date,
            email,
            user_ph_num,
            user_img,
            user_intro,
            join_date,
            email_auth,
            user_state
        FROM
            member
    </select>


      <!-- 수정 -->
    <update id="doUpdate" parameterType="UserVO">
        UPDATE member
        SET     
             user_pwd   = #{user_pwd}   
            ,first_name = #{first_name} 
            ,last_name  = #{last_name}  
            ,birth_date = #{birth_date} 
            ,email      = #{email}      
            ,user_ph_num= #{user_ph_num}
            ,user_img   = #{user_img}   
            ,user_intro = #{user_intro} 
            ,join_date  = #{join_date}  
        WHERE user_id   = #{user_id}
    </update>


    
    <!-- 총 회원 수 namespace+id --> 
    <select id="getCount" resultType="int">
        SELECT COUNT(*) cnt
        FROM member
    </select>



    <!-- 회원 가입 : namespace+id ->O -->
    <insert id="doInsert" parameterType="UserVO">
        INSERT INTO member (
            user_id,
            user_pwd,
            first_name,
            last_name,
            birth_date,
            email,
            user_ph_num,
            user_img,
            user_intro
        ) VALUES (
            #{user_id},
            #{user_pwd},
            #{first_name},
            #{last_name},
            #{birth_date},
            #{email},
            #{user_ph_num},
            #{user_img},
            #{user_intro}
        )
    </insert>



    <!-- 전체 삭제 -->
    <delete id="deleteAll">
        DELETE FROM member
    </delete>

    <!-- 회원 탈퇴(단건 삭제): deleteAll에서 where절 붙이기 스프링에서는 이렇게 호출한다. -->
    <delete id="doDelete" parameterType="UserVO">
        DELETE FROM member
        WHERE
        user_id = #{user_id}
    </delete>


    <!-- 단건 조회 -->
    <select id="doSelectOne" parameterType="UserVO"
        resultMap="userResultMap">

    <![CDATA[ 
        SELECT
            user_id,
            user_pwd,
            first_name,
            last_name,
            birth_date,
            email,
            user_ph_num,
            user_img,
            user_intro,
            join_date,
            email_auth,
            user_state
        FROM
            member
        WHERE user_id = #{user_id} ]]>
    </select>


    <resultMap type="UserVO" id="userResultMap">
        <id property="user_id" column="user_id" />
        <result property="user_pwd" column="user_pwd" />
        <result property="first_name" column="first_name" />
        <result property="last_name" column="last_name" />
        <result property="birth_date" column="birth_date" />
        <result property="email" column="email" />
        <result property="user_ph_num" column="user_ph_num" />
        <result property="user_img" column="user_img" />
        <result property="user_intro" column="user_intro" />
        <result property="join_date" column="join_date" />
        <result property="email_auth" column="email_auth" />
        <result property="user_state" column="user_state" />
        
        
    </resultMap>

    <sql id="searchCondition">
        <!-- WHERE엘리멘트는 태그에 의해 컨텐츠가 리턴되면 단순히 "WHERE"만을 추가한다. 게다가 AND, OR로 시작하면 
            AND나 OR을 지워버린다. -->
        <!-- user_id,user_pwd, first_name,last_name,birth_date,email,user_ph_num,user_img,user_intro,join_date -->
        <where>
            <choose>
            <when test=" '10' == searchDiv and '' != searchWord ">
                    user_id LIKE #{searchWord}||'%'
                </when>
            <when test=" '20' == searchDiv and '' != searchWord  ">
                    first_name LIKE #{searchWord}||'%'
                </when>
            <when test=" '30' == searchDiv and '' != searchWord  ">
                    last_name LIKE #{searchWord}||'%'
                </when>
            <when test=" '40' == searchDiv and '' != searchWord  ">
                    birth_date LIKE #{searchWord}||'%'
                </when>
            <when test=" '50' == searchDiv and '' != searchWord  ">
                    email LIKE #{searchWord}||'%'
                </when>
            <when test=" '60' == searchDiv and '' != searchWord  ">
                    user_ph_num LIKE #{searchWord}||'%'
                </when>
            <when test=" '70' == searchDiv and '' != searchWord  ">
                    join_date LIKE #{searchWord}||'%'
                </when>
            </choose>
        </where>
    </sql>

    <select id="doRetrieve" parameterType="SearchVO"
        resultType="UserVO">
        SELECT A.*, B.*
        FROM(
            SELECT TT1.rnum as num
                   ,tt1.user_id
                   ,first_name
                   ,last_name
                   ,birth_date
                   ,email
                   ,user_ph_num
                   ,CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD')=TO_CHAR(tt1.join_date,'YYYYMMDD') THEN TO_CHAR(tt1.join_date,'HH24:MI')
                            ELSE TO_CHAR(tt1.join_date,'YYYY/MM/DD')
                        END join_date
            FROM(
                SELECT ROWNUM rnum,T1.*
                FROM(
                    SELECT *
                    FROM MEMBER
                    --검색 조건 : id(10) / 성씨 (20)/ 이름 (30)/ 생일 (40)/ 이메일 (50)/ 핸드폰 번호 (60)/ 가입 날짜 (70)/ 
                    <include refid="searchCondition"/>
        
                    
                    ORDER BY join_date desc
                )T1
            )TT1
            --paging
            where rnum between #{pageSize}*(#{pageNum}-1)+1 and #{pageSize}*(#{pageNum}-1)+#{pageSize}
        )A
        CROSS JOIN
        (
            SELECT COUNT(*) total_cnt
            FROM member
            --검색조건
            <include refid="searchCondition"/>
        )B
    </select>

</mapper>